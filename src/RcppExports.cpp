// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// m_conv
arma::mat m_conv(NumericMatrix x);
RcppExport SEXP irtpar_m_conv(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        arma::mat __result = m_conv(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// v_conv
arma::mat v_conv(NumericVector x);
RcppExport SEXP irtpar_v_conv(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        arma::mat __result = v_conv(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// v_conv1
arma::mat v_conv1(NumericVector x);
RcppExport SEXP irtpar_v_conv1(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        arma::mat __result = v_conv1(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// nv_mean
double nv_mean(NumericVector x);
RcppExport SEXP irtpar_nv_mean(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        double __result = nv_mean(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dmvnrm_arma
arma::vec dmvnrm_arma(NumericMatrix x_i, NumericVector mean_i, NumericMatrix sigma_i, bool logd = false);
RcppExport SEXP irtpar_dmvnrm_arma(SEXP x_iSEXP, SEXP mean_iSEXP, SEXP sigma_iSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x_i(x_iSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type mean_i(mean_iSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type sigma_i(sigma_iSEXP );
        Rcpp::traits::input_parameter< bool >::type logd(logdSEXP );
        arma::vec __result = dmvnrm_arma(x_i, mean_i, sigma_i, logd);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mvrnorm_arma
arma::mat mvrnorm_arma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP irtpar_mvrnorm_arma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP );
        Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP );
        arma::mat __result = mvrnorm_arma(n, mu, sigma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// theta_bar
NumericVector theta_bar(IntegerVector t, List post_list, double h, int d, int M);
RcppExport SEXP irtpar_theta_bar(SEXP tSEXP, SEXP post_listSEXP, SEXP hSEXP, SEXP dSEXP, SEXP MSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP );
        Rcpp::traits::input_parameter< List >::type post_list(post_listSEXP );
        Rcpp::traits::input_parameter< double >::type h(hSEXP );
        Rcpp::traits::input_parameter< int >::type d(dSEXP );
        Rcpp::traits::input_parameter< int >::type M(MSEXP );
        NumericVector __result = theta_bar(t, post_list, h, d, M);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mix_weight
double mix_weight(IntegerVector t, List post_list, double h, int d, int M);
RcppExport SEXP irtpar_mix_weight(SEXP tSEXP, SEXP post_listSEXP, SEXP hSEXP, SEXP dSEXP, SEXP MSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP );
        Rcpp::traits::input_parameter< List >::type post_list(post_listSEXP );
        Rcpp::traits::input_parameter< double >::type h(hSEXP );
        Rcpp::traits::input_parameter< int >::type d(dSEXP );
        Rcpp::traits::input_parameter< int >::type M(MSEXP );
        double __result = mix_weight(t, post_list, h, d, M);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// vcm
arma::mat vcm(NumericMatrix X_i);
RcppExport SEXP irtpar_vcm(SEXP X_iSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type X_i(X_iSEXP );
        arma::mat __result = vcm(X_i);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// post_vcm
arma::mat post_vcm(List post_list);
RcppExport SEXP irtpar_post_vcm(SEXP post_listSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type post_list(post_listSEXP );
        arma::mat __result = post_vcm(post_list);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// post_mean
arma::vec post_mean(List post_list, arma::mat post_vcm);
RcppExport SEXP irtpar_post_mean(SEXP post_listSEXP, SEXP post_vcmSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type post_list(post_listSEXP );
        Rcpp::traits::input_parameter< arma::mat >::type post_vcm(post_vcmSEXP );
        arma::vec __result = post_mean(post_list, post_vcm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// combine_np
NumericMatrix combine_np(List post_list);
RcppExport SEXP irtpar_combine_np(SEXP post_listSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type post_list(post_listSEXP );
        NumericMatrix __result = combine_np(post_list);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
